/* generated from grammar.pegjs */
goog.provide("remora.parser");
remora.parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "_": parse__,
        "_block_end": parse__block_end,
        "_block_expr": parse__block_expr,
        "_block_mid": parse__block_mid,
        "_block_mid_body": parse__block_mid_body,
        "_block_start": parse__block_start,
        "_block_start_body": parse__block_start_body,
        "_control_block": parse__control_block,
        "_doc": parse__doc,
        "code_block": parse_code_block,
        "control_block": parse_control_block,
        "doc": parse_doc,
        "exprbody": parse_exprbody,
        "expression": parse_expression,
        "filter": parse_filter,
        "line_start": parse_line_start,
        "markup": parse_markup,
        "nl": parse_nl,
        "root_doc": parse_root_doc,
        "var": parse_var
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "root_doc";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_root_doc() {
        var cacheKey = 'root_doc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_doc();
        var result2 = result1 !== null
          ? (function(doc) {
            doc.computeLocation = computeLocation;
            return doc;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_doc() {
        var cacheKey = 'doc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        var result3 = parse__doc();
        while (result3 !== null) {
          result1.push(result3);
          var result3 = parse__doc();
        }
        var result2 = result1 !== null
          ? (function() {
            fixup_doc(cur_doc);
            return cur_doc;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__doc() {
        var cacheKey = '_doc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_markup();
        if (result5 !== null) {
          var result1 = result5;
        } else {
          var result4 = parse_nl();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            if (input.length > pos) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;;
            };
          };
        }
        var result2 = result1 !== null
          ? (function(v) {
            if (typeof v === "string") {
              var last_child = cur_doc.children[cur_doc.children.length - 1] || {};
              if (last_child.type === "string") {
                last_child.value += v;
                v = undefined;
              } else {
                v = Node("string", {
                  value: v,
                  pos: pos - 1
                });
              }
            }
          
            if (v !== undefined) {
              cur_doc.children.push(v);
            }
          
            return cur_doc;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_markup() {
        var cacheKey = 'markup@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_expression();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_control_block();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_code_block();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression() {
        var cacheKey = 'expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "${") {
          var result3 = "${";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"${\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_exprbody();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "}") {
              var result5 = "}";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"}\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(body) {
            return Node("expression", {
              pos: pos - 1,
              expr: body.expr,
              filters: body.filter
            });
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_exprbody() {
        var cacheKey = 'exprbody@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[^}|]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[^}|]");
          }
        }
        if (result5 !== null) {
          var result3 = [];
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^}|]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[^}|]");
              }
            }
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          var result4 = parse_filter();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, f) {
            return {
              expr: expr.join(""),
              filter: f
            };
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_filter() {
        var cacheKey = 'filter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "|") {
          var result7 = "|";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"|\"");
          }
        }
        if (result7 !== null) {
          var result8 = [];
          if (input.substr(pos).match(/^[^}]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("[^}]");
            }
          }
          while (result9 !== null) {
            result8.push(result9);
            if (input.substr(pos).match(/^[^}]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[^}]");
              }
            }
          }
          if (result8 !== null) {
            var result5 = [result7, result8];
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(filter) {
            return filter.join("").split(",");
          })(result5[1])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 0) === "") {
            var result2 = "";
            pos += 0;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          var result3 = result2 !== null
            ? (function() { return []; })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_control_block() {
        var cacheKey = 'control_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result14 = parse_line_start();
        if (result14 !== null) {
          var result15 = [];
          var result17 = parse__();
          while (result17 !== null) {
            result15.push(result17);
            var result17 = parse__();
          }
          if (result15 !== null) {
            if (input.substr(pos, 2) === "%%") {
              var result16 = "%%";
              pos += 2;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"%%\"");
              }
            }
            if (result16 !== null) {
              var result12 = [result14, result15, result16];
            } else {
              var result12 = null;
              pos = savedPos3;
            }
          } else {
            var result12 = null;
            pos = savedPos3;
          }
        } else {
          var result12 = null;
          pos = savedPos3;
        }
        var result13 = result12 !== null
          ? (function(line) {
            return line.join("") + "%";
          })(result12[1])
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_line_start();
          if (result4 !== null) {
            var result5 = [];
            var result10 = parse__();
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse__();
            }
            if (result5 !== null) {
              if (input.substr(pos, 1) === "%") {
                var result6 = "%";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"%\"");
                }
              }
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse__control_block();
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(b) {
              return b;
            })(result2[4])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__control_block() {
        var cacheKey = '_control_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result10 = parse__block_start();
        if (result10 !== null) {
          var result6 = result10;
        } else {
          var result9 = parse__block_mid();
          if (result9 !== null) {
            var result6 = result9;
          } else {
            var result8 = parse__block_end();
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;;
            };
          };
        }
        var result7 = result6 !== null
          ? (function(block) {
            return block;
          })(result6)
          : null;
        if (result7 !== null) {
          var result5 = result7;
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = [];
          if (input.substr(pos).match(/^[^\n]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[^\\n]");
            }
          }
          while (result4 !== null) {
            result2.push(result4);
            if (input.substr(pos).match(/^[^\n]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n]");
              }
            }
          }
          var result3 = result2 !== null
            ? (function(line) {
              pos -= line.length;
              throw new ParseError("invalid control line: " + line.join(""));
            })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__block_start() {
        var cacheKey = '_block_start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__block_start_body();
        if (result3 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result4 = ":";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_nl();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(bl_options) {
            bl_options.pos = pos - 1;
            var block = Node("controlblock", bl_options);
            block.body = DocNode();
          
            doc_stack.push(cur_doc);
            cur_doc = block.body;
          
            block_stack.push(cur_block);
            cur_block = block;
          })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__block_start_body() {
        var cacheKey = '_block_start_body@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 3) === "for") {
          var result11 = "for";
          pos += 3;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"for\"");
          }
        }
        if (result11 !== null) {
          var result18 = parse__();
          if (result18 !== null) {
            var result12 = [];
            while (result18 !== null) {
              result12.push(result18);
              var result18 = parse__();
            }
          } else {
            var result12 = null;
          }
          if (result12 !== null) {
            var result13 = parse_var();
            if (result13 !== null) {
              var result17 = parse__();
              if (result17 !== null) {
                var result14 = [];
                while (result17 !== null) {
                  result14.push(result17);
                  var result17 = parse__();
                }
              } else {
                var result14 = null;
              }
              if (result14 !== null) {
                if (input.substr(pos, 2) === "in") {
                  var result15 = "in";
                  pos += 2;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"in\"");
                  }
                }
                if (result15 !== null) {
                  var result16 = parse__block_expr();
                  if (result16 !== null) {
                    var result9 = [result11, result12, result13, result14, result15, result16];
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(v, e) {
            return {
              expr: e,
              keyword: "for",
              vars: [v]
            };
          })(result9[2], result9[5])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 2) === "if") {
            var result7 = "if";
            pos += 2;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"if\"");
            }
          }
          if (result7 !== null) {
            var result4 = result7;
          } else {
            if (input.substr(pos, 5) === "while") {
              var result6 = "while";
              pos += 5;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"while\"");
              }
            }
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = parse__block_expr();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(kw, e) {
              return {
                expr: e,
                keyword: kw
              };
            })(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__block_mid() {
        var cacheKey = '_block_mid@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__block_mid_body();
        if (result3 !== null) {
          var result4 = [];
          var result7 = parse__();
          while (result7 !== null) {
            result4.push(result7);
            var result7 = parse__();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === ":") {
              var result5 = ":";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\":\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_nl();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(bl_options) {
            bl_options.pos = pos - 1;
            var block = Node("controlblock", bl_options);
            block.body = DocNode();
          
            if (!cur_block.sub_blocks)
              cur_block.sub_blocks = [];
            cur_block.sub_blocks.push(block);
          
            fixup_doc(cur_doc);
            cur_doc = block.body;
          })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__block_mid_body() {
        var cacheKey = '_block_mid_body@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 4) === "elif") {
          var result7 = "elif";
          pos += 4;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"elif\"");
          }
        }
        if (result7 !== null) {
          var result10 = parse__();
          if (result10 !== null) {
            var result8 = [];
            while (result10 !== null) {
              result8.push(result10);
              var result10 = parse__();
            }
          } else {
            var result8 = null;
          }
          if (result8 !== null) {
            var result9 = parse__block_expr();
            if (result9 !== null) {
              var result5 = [result7, result8, result9];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(e) {
            assertCurrentBlockIfElif("elif");
            return {
              keyword: "elif",
              expr: e
            };
          })(result5[2])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 4) === "else") {
            var result2 = "else";
            pos += 4;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"else\"");
            }
          }
          var result3 = result2 !== null
            ? (function() {
              assertCurrentBlockIfElif("else");
              return {
                keyword: "else"
              };
            })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__block_expr() {
        var cacheKey = '_block_expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result6 = parse__();
        while (result6 !== null) {
          result3.push(result6);
          var result6 = parse__();
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[^:]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[^:]");
            }
          }
          if (result5 !== null) {
            var result4 = [];
            while (result5 !== null) {
              result4.push(result5);
              if (input.substr(pos).match(/^[^:]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[^:]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e) {
            return e.join("");
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__block_end() {
        var cacheKey = '_block_end@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "end") {
          var result3 = "end";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"end\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_var();
          if (result4 !== null) {
            var result5 = parse_nl();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(keyword) {
            var cur_begin_keyword = (cur_block || {}).keyword;
            if (keyword !== cur_begin_keyword)
              throw Error("Ending block " + keyword + " which hasn't been started " +
                          "(current block: " + cur_begin_keyword + ")");
            fixup_doc(cur_doc);
            cur_doc = doc_stack.pop();
            var this_block = cur_block;
            cur_block = block_stack.pop();
            return this_block;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_code_block() {
        var cacheKey = 'code_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "<%") {
          var result3 = "<%";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<%\"");
          }
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedPos4 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "%>") {
            var result11 = "%>";
            pos += 2;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"%>\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result11 === null) {
            var result9 = '';
          } else {
            var result9 = null;
            pos = savedPos4;
          }
          if (result9 !== null) {
            if (input.length > pos) {
              var result10 = input.charAt(pos);
              pos++;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result10 !== null) {
              var result7 = [result9, result10];
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
          var result8 = result7 !== null
            ? (function(ch) { return ch })(result7[1])
            : null;
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var savedPos2 = pos;
              var savedPos3 = pos;
              var savedPos4 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              if (input.substr(pos, 2) === "%>") {
                var result11 = "%>";
                pos += 2;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"%>\"");
                }
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result11 === null) {
                var result9 = '';
              } else {
                var result9 = null;
                pos = savedPos4;
              }
              if (result9 !== null) {
                if (input.length > pos) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed('any character');
                  }
                }
                if (result10 !== null) {
                  var result7 = [result9, result10];
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
              var result8 = result7 !== null
                ? (function(ch) { return ch })(result7[1])
                : null;
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            if (input.substr(pos, 2) === "%>") {
              var result5 = "%>";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"%>\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(body) {
            return Node("codeblock", {
              pos: pos - 2,
              body: body.join("")
            });
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_var() {
        var cacheKey = 'var@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_0-9$]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_0-9$]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[a-zA-Z_0-9$]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z_0-9$]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(v) { return v.join(""); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[ 	]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	]");
          }
        }
        var result2 = result1 !== null
          ? (function(text) {
            return text;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_line_start() {
        var cacheKey = 'line_start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = (function() {
          return input[pos-1] == "\n" || pos == 0;
        })() ? '' : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nl() {
        var cacheKey = 'nl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result5 = parse__();
        while (result5 !== null) {
          result3.push(result5);
          var result5 = parse__();
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "\n") {
            var result4 = "\n";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\n\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(text) {
            return text.join("");
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    function computeLocation(pos) {
      
      // Note: this differs slightly from PegJS's 'compute location' function
      
      // as it considers newlines to be part of the line, not part of the next
      
      // line (ex, if the input is "a\nb", then `computeLocation(1)` (ie, the
      
      // '\n') will return `1`, not `2`).
      
  
      
      if (pos < 0)
      
        return { line: -1, column: -1, pos: pos };
      
      if (pos > input.length)
      
        pos = input.length;
      
  
      
      var line = 1;
      
      var column = 1;
      
      var seenNL = false;
      
  
      
      for (var i = 0; i < pos; i += 1) {
      
        if (seenNL) {
      
          line += 1;
      
          column = 0;
      
          seenNL = false;
      
        }
      
        column += 1;
      
  
      
        switch (input.charAt(i)) {
      
          case '\r':
      
          case '\u2028':
      
          case '\u2029':
      
            if (i + 1 < pos && input.charAt(i + 1) === '\n')
      
              continue;
      
          case '\n':
      
            seenNL = true;
      
        }
      
      }
      
  
      
      return { line: line, column: column, pos: pos };
      
    }
      
  
      
    function Node(type, options) {
      
      options = options || {};
      
      options.type = type;
      
      if (options.pos === undefined)
      
        throw Error("Node " + type + " doesn't define a 'pos'!");
      
      return options;
      
    }
      
  
      
    function ParseError(message) {
      
      this.location = computeLocation(pos);
      
      this.msg = message;
      
      this.message = this.toString();
      
    }
      
  
      
    ParseError.prototype.toString = function() {
      
      var loc = this.location;
      
      return "ParseError at " + loc.line + ":" + pos.column + ": " + this.msg;
      
    };
      
  
      
    function assertCurrentBlockIfElif(keyword) {
      
      var prev_keyword = (cur_block || {}).keyword
      
      if (prev_keyword == "if") {
      
        var sub_blocks = cur_block.sub_blocks || [];
      
        if (sub_blocks.length == 0)
      
          return;
      
        prev_keyword = sub_blocks[sub_blocks.length - 1].keyword;
      
        if (prev_keyword == "elif")
      
          return;
      
      }
      
      throw new ParseError("'" + keyword + "' must come after an 'if' or " +
      
                           "'elif', not '" + prev_keyword + "'.");
      
    }
      
  
      
    function DocNode() {
      
      return Node("doc", {
      
        pos: pos,
      
        children: []
      
      });
      
    };
      
  
      
    function fixup_doc(d) {
      
      if (d.added_nl) {
      
        delete d.added_nl;
      
        var last_child = d.children[d.children.length - 1];
      
        if ((last_child || {}).type === "string")
      
          last_child.value = last_child.value.slice(0, -1)
      
      }
      
    }
      
  
      
    var doc_stack = [];
      
    var cur_doc = DocNode();
      
  
      
    var block_stack = [];
      
    var cur_block = null;
      
  
      
    if (input.length > 0 && input[input.length - 1] != "\n") {
      
      cur_doc.added_nl = true;
      
      input += "\n";
      
    }
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
